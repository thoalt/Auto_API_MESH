{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "ERROR", "message": "request = <SubRequest 'login' for <Function test_LOGOUT_ACT_1>>\n\n    @pytest.fixture(autouse=False, scope=\"class\")\n    def login(request):\n        \"\"\"\n        Description: Login to MESH AP via API\n        - If mode Mesh is FACTORY --> Login and Create New Mesh Default --> Return Cookie\n        - If Mode Mesh is CAP, and SSIDName is not Default SSID --> First Reset Factory, Then Login and Create new mesh default --> return Cookie\n        - If Mode Mesh is CAP, and SSIDName is Default SSID --> Only Login  --> Return Cookie\n        \"\"\"\n        # print(\"START LOGIN\")\n>       serialClt = Serial_Lib()\n\ntestcase\\conftest.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbase\\SerialLib.py:32: in __init__\n    self.con = serial.Serial(\nC:\\Users\\MIMO\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\serial\\serialwin32.py:33: in __init__\n    super(Serial, self).__init__(*args, **kwargs)\nC:\\Users\\MIMO\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\serial\\serialutil.py:244: in __init__\n    self.open()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Serial<id=0x284797f9ee0, open=False>(port='COM24', baudrate=115200, bytesize=8, parity='N', stopbits=1, timeout=5, xonxoff=False, rtscts=False, dsrdtr=False)\n\n    def open(self):\n        \"\"\"\\\n        Open port with current settings. This may throw a SerialException\n        if the port cannot be opened.\n        \"\"\"\n        if self._port is None:\n            raise SerialException(\"Port must be configured before it can be used.\")\n        if self.is_open:\n            raise SerialException(\"Port is already open.\")\n        # the \"\\\\.\\COMx\" format is required for devices other than COM1-COM8\n        # not all versions of windows seem to support this properly\n        # so that the first few ports are used with the DOS device name\n        port = self.name\n        try:\n            if port.upper().startswith('COM') and int(port[3:]) > 8:\n                port = '\\\\\\\\.\\\\' + port\n        except ValueError:\n            # for like COMnotanumber\n            pass\n        self._port_handle = win32.CreateFile(\n            port,\n            win32.GENERIC_READ | win32.GENERIC_WRITE,\n            0,  # exclusive access\n            None,  # no security\n            win32.OPEN_EXISTING,\n            win32.FILE_ATTRIBUTE_NORMAL | win32.FILE_FLAG_OVERLAPPED,\n            0)\n        if self._port_handle == win32.INVALID_HANDLE_VALUE:\n            self._port_handle = None    # 'cause __del__ is called anyway\n>           raise SerialException(\"could not open port {!r}: {!r}\".format(self.portstr, ctypes.WinError()))\nE           serial.serialutil.SerialException: could not open port 'COM24': PermissionError(13, 'Access is denied.', None, 5)\n\nC:\\Users\\MIMO\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\serial\\serialwin32.py:64: SerialException\n", "test_name": "test_LOGOUT_ACT_1", "rerun": "0"}}, "suite_name": "testcase/Logout/test_LOGOUT_ACT_1.py"}}}, "date": "November 11, 2022", "start_time": 1668138885.2541618, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "1"}