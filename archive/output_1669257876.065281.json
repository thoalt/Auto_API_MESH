{"content": {"suites": {"0": {"status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}, "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_RESET_ACT_1", "rerun": "0"}}, "suite_name": "testcase/Group_2/Reset/test_RESET_ACT_1.py"}, "1": {"suite_name": "testcase/Group_2/Reset/test_RESET_ACT_2345.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_RESET_ACT_1", "rerun": "0"}}, "status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "2": {"suite_name": "testcase/Group_2/Reset/test_RESET_ACT_6.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_RESET_ACT_1", "rerun": "0"}}, "status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "3": {"suite_name": "testcase/Group_2/Reset/test_RESET_ACT_7.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_RESET_ACT_1", "rerun": "0"}}, "status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "4": {"suite_name": "testcase/Group_2/Reset/test_RESET_ACT_8.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_RESET_ACT_1", "rerun": "0"}}, "status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "5": {"suite_name": "testcase/Group_2/Reset/test_RESET_MACLST_1011.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_RESET_ACT_1", "rerun": "0"}}, "status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "6": {"suite_name": "testcase/Group_2/Reset/test_RESET_MACLST_12.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_RESET_ACT_1", "rerun": "0"}}, "status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "7": {"suite_name": "testcase/Group_2/Reset/test_RESET_MACLST_13.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_RESET_ACT_1", "rerun": "0"}}, "status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "8": {"suite_name": "testcase/Group_2/Reset/test_RESET_MACLST_14.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_RESET_ACT_1", "rerun": "0"}}, "status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "9": {"suite_name": "testcase/Group_2/Reset/test_RESET_MACLST_15.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_RESET_ACT_1", "rerun": "0"}}, "status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "10": {"suite_name": "testcase/Group_2/Reset/test_RESET_MACLST_16.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_RESET_ACT_1", "rerun": "0"}}, "status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "11": {"suite_name": "testcase/Group_2/Reset/test_RESET_MACLST_17.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_RESET_ACT_1", "rerun": "0"}}, "status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "12": {"suite_name": "testcase/Group_2/Reset/test_RESET_MACLST_3.py", "tests": {"0": {"status": "SKIP", "message": "('E:\\\\Auto_WorkingTesting\\\\Auto_API_MESH\\\\testcase\\\\Group_2\\\\Reset\\\\test_RESET_MACLST_3.py', 15, 'Skipped: This is Manual Testcase')\n", "test_name": "test_RESET_ACT_1", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "13": {"suite_name": "testcase/Group_2/Reset/test_RESET_MACLST_4.py", "tests": {"0": {"status": "SKIP", "message": "('E:\\\\Auto_WorkingTesting\\\\Auto_API_MESH\\\\testcase\\\\Group_2\\\\Reset\\\\test_RESET_MACLST_4.py', 15, 'Skipped: This is Manual Testcase')\n", "test_name": "test_RESET_ACT_1", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "14": {"suite_name": "testcase/Group_2/Reset/test_RESET_MACLST_5.py", "tests": {"0": {"status": "SKIP", "message": "('E:\\\\Auto_WorkingTesting\\\\Auto_API_MESH\\\\testcase\\\\Group_2\\\\Reset\\\\test_RESET_MACLST_5.py', 15, 'Skipped: This is Manual Testcase')\n", "test_name": "test_RESET_ACT_1", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "15": {"suite_name": "testcase/Group_2/Reset/test_RESET_MACLST_678.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_RESET_ACT_1", "rerun": "0"}}, "status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "16": {"suite_name": "testcase/Group_2/Reset/test_RESET_MACLST_9.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_RESET_ACT_1", "rerun": "0"}}, "status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "17": {"suite_name": "testcase/Group_2/Reset/test_RESET_MESH_ONLY_1_CAP.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_RESET_ACT_1", "rerun": "0"}}, "status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "18": {"suite_name": "testcase/Group_2/Reset/test_RESET_MESH_ONLY_2_MRE.py", "tests": {"0": {"status": "SKIP", "message": "('E:\\\\Auto_WorkingTesting\\\\Auto_API_MESH\\\\testcase\\\\Group_2\\\\Reset\\\\test_RESET_MESH_ONLY_2_MRE.py', 15, 'Skipped: This is Manual Testcase')\n", "test_name": "test_RESET_ACT_1", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "19": {"suite_name": "testcase/Group_2/Reset/test_RESET_MESH_ONLY_3_BOTH.py", "tests": {"0": {"status": "SKIP", "message": "('E:\\\\Auto_WorkingTesting\\\\Auto_API_MESH\\\\testcase\\\\Group_2\\\\Reset\\\\test_RESET_MESH_ONLY_3_BOTH.py', 16, 'Skipped: This is Manual Testcase')\n", "test_name": "test_RESET_ACT_1", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "20": {"suite_name": "testcase/Group_2/Reset/test_RESET_MESH_ONLY_4.py", "tests": {"0": {"status": "SKIP", "message": "('E:\\\\Auto_WorkingTesting\\\\Auto_API_MESH\\\\testcase\\\\Group_2\\\\Reset\\\\test_RESET_MESH_ONLY_4.py', 15, 'Skipped: This is Manual Testcase')\n", "test_name": "test_RESET_ACT_1", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "21": {"suite_name": "testcase/Group_2/Reset/test_RESET_MESH_ONLY_5.py", "tests": {"0": {"status": "SKIP", "message": "('E:\\\\Auto_WorkingTesting\\\\Auto_API_MESH\\\\testcase\\\\Group_2\\\\Reset\\\\test_RESET_MESH_ONLY_5.py', 15, 'Skipped: This is Manual Testcase')\n", "test_name": "test_RESET_ACT_1", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "22": {"suite_name": "testcase/Group_2/Reset/test_RESET_REQID_23456.py", "tests": {"0": {"status": "ERROR", "message": "request = <SubRequest 'login' for <Function test_RESET_ACT_1>>\n\n    @pytest.fixture(autouse=False, scope=\"class\")\n    def login(request):\n        \"\"\"\n        Description: Login to MESH AP via API\n        - If mode Mesh is FACTORY --> Login and Create New Mesh Default --> Return Cookie\n        - If Mode Mesh is CAP, and SSIDName is not Default SSID --> First Reset Factory, Then Login and Create new mesh default --> return Cookie\n        - If Mode Mesh is CAP, and SSIDName is Default SSID --> Only Login  --> Return Cookie\n        \"\"\"\n        # print(\"START LOGIN\")\n        serialClt = Serial_Lib()\n        meshCreateClt = meshCreateClient()\n        ClientSes = openssesionClient()\n        LoginClt = LoginClient()\n        cookie = \"\"\n    \n        passGuiDefault = utl.md5_encrypt(cfg.STR_ENCRYPT, \"00000006\")\n        modeMesh = serialClt.Get_Mode_Mesh()\n>       SSIDName = serialClt.Get_SSID_Name(cfg.WIFI_INT_5G)\n\ntestcase\\conftest.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <base.SerialLib.Serial_Lib object at 0x000002BC69082C40>, interface = 'ra0'\n\n    def Get_SSID_Name(self, interface):\n        ssidName = ''\n        ssidNameLine = ''\n        cmd = f'iwconfig {interface} | grep ESSID'\n        output = self.Get_Ouput_From_Command(cmd, 5)\n    \n        for idx, line in enumerate(output):\n            if \"ESSID:\" in line.decode('utf8'):\n                ssidNameLine = output[idx].decode('utf8')\n                break\n>       ssidName = ssidNameLine.split(\"ESSID:\")[1].split('\"')[1]\nE       IndexError: list index out of range\n\nbase\\SerialLib.py:100: IndexError\n", "test_name": "test_RESET_ACT_1", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}}}}, "date": "November 23, 2022", "start_time": 1669196121.883458, "total_suite": 23, "status": "FAIL", "status_list": {"pass": "15", "fail": "0", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "16"}