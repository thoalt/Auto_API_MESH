{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "ERROR", "message": "request = <SubRequest 'login' for <Function test_RADIO24G_EDIT_RES_6>>\n\n    @pytest.fixture(autouse=False, scope=\"class\")\n    def login(request):\n        \"\"\"\n        Description: Login to MESH AP via API\n        - If mode Mesh is FACTORY --> Login and Create New Mesh Default --> Return Cookie\n        - If Mode Mesh is CAP, and SSIDName is not Default SSID --> First Reset Factory, Then Login and Create new mesh default --> return Cookie\n        - If Mode Mesh is CAP, and SSIDName is Default SSID --> Only Login  --> Return Cookie\n        \"\"\"\n        # ClientSes = openssesionClient()\n        # cookie = ClientSes.Open_Sesion_And_Get_Cookie()\n        #\n        # LoginClt = LoginClient()\n        # LoginClt.login(cookie)\n        #\n        # request.cls.cookie = cookie\n    \n        # print(\"START LOGIN\")\n        serialClt = Serial_Lib()\n        meshCreateClt = meshCreateClient()\n        ClientSes = openssesionClient()\n        LoginClt = LoginClient()\n        cookie = \"\"\n    \n        passGuiDefault = utl.md5_encrypt(cfg.STR_ENCRYPT, cfg.SALT_DEFAULT)\n        modeMesh = serialClt.Get_Mode_Mesh()\n        print(\"************** MODE MESSH *************\")\n        print(modeMesh)\n>       SSIDName = serialClt.Get_SSID_Name(cfg.WIFI_INT_5G)\n\ntestcase\\conftest.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <base.SerialLib.Serial_Lib object at 0x0000026B5BFBFD30>, interface = 'ra0'\n\n    def Get_SSID_Name(self, interface):\n        ssidName = ''\n        ssidNameLine = ''\n        cmd = f'iwconfig {interface} | grep ESSID'\n        output = self.Get_Ouput_From_Command(cmd, 5)\n    \n        for idx, line in enumerate(output):\n            # print(line.decode('utf8'))\n            if \"ESSID:\" in line.decode('utf8'):\n                # print(ssidNameLine)\n                ssidNameLine = output[idx].decode('utf8')\n                # break\n>       ssidName = ssidNameLine.split(\"ESSID:\")[1].split('\"')[1]\nE       IndexError: list index out of range\n\nbase\\SerialLib.py:104: IndexError\n", "test_name": "test_RADIO24G_EDIT_RES_6", "rerun": "0"}}, "suite_name": "testcase/Group_3/Radio2GEdit/test_RADIO24G_EDIT_ACT_23458.py"}}}, "date": "December 13, 2022", "start_time": 1670893969.630123, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "1"}